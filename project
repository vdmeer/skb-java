#!/bin/bash

## Copyright 2014-2014 Sven van der Meer <vdmeer.sven@mykolab.com>
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
## 
##     http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

##
## Shell script to automate build and deployment of maven projects.
##
## @package    de.vandermeer.skb
## @author     Sven van der Meer <vdmeer.sven@mykolab.com>
## @copyright  2014-2014 Sven van der Meer
## @license    http://www.apache.org/licenses/LICENSE-2.0  Apache License, Version 2.0
## @version    v0.0.3-SNAPSHOT build 141210 (10-Dec-14)
##



##
## Change the following variables to you settings
##

# Project demo directory
dir_project_demo_abs="all-demos"
dir_project_demo="../$dir_project_demo_abs"



##
## Don't change anything below unless you know what you are doing :)
##

# Project name for printouts
project_name=`echo ${PWD##*/} | tr '[:lower:]' '[:upper:]'`

# Programme name, used to echos
prog_name=`basename $0`

# Target directory
dir_target="target"

# Defined modules taken from the module directory
defined_modules=`ls modules/*.settings | sed -e 's/modules\///' -e 's/\.settings//'`

# Defined tasks as per functions in this script
defined_tasks="prepare-files test-files create-pom set-versions create-demo-templates deploy-demo"

# Version file with BASH variable exports
fn_version_bash="$dir_target/version.bash"

# Version file in ANT/MAVEN property style
fn_version_ant="$dir_target/version.ant"

# Unset file for bash
fn_bash_unset="$dir_target/unset.bash"

# Directory with POM artifacts
dir_pom_artifacts="pom-artifacts/"



##
## Help screen and exit condition (i.e. too few arguments)
##
Help()
{
	echo "$prog_name - prepares $project_name modules for deployment"
	echo "       Usage:  $prog_name [-options] [task] [module]"
	echo "         - use <-m module> and <-t task>"
	echo "         - use -ma plus <-t task>"
	echo "         - use -ta plus <-m module>"
	echo "         - use -ma and -ta and no further task nor module"
	echo ""
	echo "       Options"
	echo "       -ma    - process all defined modules"
	echo "       -ta    - process all defined tasks (results might not be what you expect!)"
	echo "       -h     - this help screen"
	echo "       -S     - silent mode, do not output anything except errors"
	echo "       -c     - clean up, remove most generated directories / files ($dir_target)"
	echo "       -cD    - clean up, remove demo directory ($dir_project_demo)"
	echo ""
	echo "       Defined tasks:"
	for task in $defined_tasks
	do
		echo "       - $task"
	done
	echo ""
	echo "       Defined modules:"
	for mod in $defined_modules
	do
		echo "       - $mod"
	done
	echo ""
	echo "       Requirements: asciidoc (in path), ant (in path)"
	echo ""
	exit 255;
}
if [ $# -eq 0 ]; then
	Help
fi



##
## Process CLI and set processing parameters
## - we process all CLI options before going any further
## - we exit programme if CLI options are amigious (we don't want a wiered machine!)
##
all_modules=false
all_tasks=false
cli_module=
cli_task=
progmod_silent=false
while [ $# -gt 0 ]
do
	case $1 in
		#-c cleans up
		-c)		rm -fr $dir_target;exit 255;;

		#-cD cleans up
		-cD)	rm -fr $dir_project_demo;exit 255;;

		#-h prints help and exists
		-h)		Help;exit 255;;

		#-S activates silent mode
		-S)		shift;progmod_silent=true;;

		# -ma checks if a single module was given, if not then set all modules to true
		-ma)	if [ "$cli_module" == "" ]; then
					shift;
					all_modules=true;
				else
					echo "$prog_name: -ma used and single module specified, which one?";
					exit 255;
				fi
		;;

		# -ta checks if a single task was given, if not then set all tasks to true
		-ta)	if [ "$cli_task" == "" ]; then
					shift;
					all_tasks=true;
				else
					echo "$prog_name: -ta used and single task specified, which one?";
					exit 255;
				fi
		;;

		# -t checks if all tasks are used, if not then if a task is given
		-t)		if [ $all_tasks == true ]; then
					echo "$prog_name: single task specified and -ta used, which one?";
					exit 255;
				else
					shift;
					if [ "$1" == "" ];then
						echo "$prog_name: -t used without a task";
						exit 255;
					else
						cli_task=$1;
						shift;
					fi
				fi
		;;

		# -m checks if all modules are used, if not then if a module is given
		-m)		if [ $all_modules == true ]; then
					echo "$prog_name: single module specified and -ma used, which one?";
					exit 255;
				else
					shift;
					if [ "$1" == "" ];then
						echo "$prog_name: -m used without a module";
						exit 255;
					else
						cli_module=$1;
						shift;
					fi
				fi
		;;
		*)	echo "$prog_name: undefined CLI option - $1"; exit 255;;
	esac
done

## now check if we have modules and tasks to process and if they are valid

## start with modules
todo_modules=
if [ $all_modules == true ]; then
	#case 1: all_modules is true
	todo_modules=$defined_modules
else
	if [ "$cli_module" == "" ]; then
		#case 2: all_modules is false, cli_module is empty
		echo "$prog_name: no module given"; exit 255;
	else
		#case 3: all_modules is false, cli_module is not empty
		for mod in $defined_modules
		do
			if [ "$mod" == "$cli_module" ]; then
				todo_modules=$cli_module
			fi
		done
		if [ "$todo_modules" == "" ]; then
			echo "$prog_name: no valid module given - module <$cli_module> is not defined"; exit 255;
		fi
	fi
fi

## next is tasks
todo_tasks=
if [ $all_tasks == true ]; then
	#case 1: all_tasks is true
	todo_tasks="$defined_tasks"
else
	if [ "$cli_task" == "" ]; then
		#case 2: all_tasks is false, cli_task is empty
		echo "$prog_name: no task given"; exit 255;
	else
		#case 3: all_tasks is false, cli_task is not empty
		for mod in $defined_tasks
		do
			if [ "$mod" == "$cli_task" ]; then
				todo_tasks="$cli_task"
			fi
		done
		if [ "$todo_tasks" == "" ]; then
			echo "$prog_name: no valid task given - task <$cli_task> is not defined"; exit 255;
		fi
	fi
fi



##
## Function to echo messages, except when in silent mode
##
PrintMessage()
{
	if [ $progmod_silent == false ]; then
		if [ "$2" == "" ]; then
			echo "$1"
		else
			echo "$1: $2"
		fi
	fi
}



## now we have a list of modules and tasks in the todo_ variables, minimum length is 1
PrintMessage $prog_name "processing modules: $todo_modules"
PrintMessage $prog_name "processing tasks:   $todo_tasks"



##
## Prepare the infrastructure, general plus module specific
##
prepare-files()
{
	if [ ! -d $dir_target ]; then
		mkdir $dir_target
	fi

	if [ ! -f $fn_version_bash ]; then
		touch $fn_version_bash
	fi

	if [ ! -f $fn_version_ant ]; then
		touch $fn_version_ant
	fi

	if [ ! -f $fn_bash_unset ]; then
		touch $fn_bash_unset
	fi

	# read settings for module and then create a BASH file for that
	local fn_in=modules/$1.settings
	local fn_out=$dir_target/$1.bash
	echo "" > $fn_out
	# read variables are all variables from all files, so that we can create an unset file
	while IFS='
	' read line
	do
		if [[ ! $line == \#* ]] && [[ ! ${#line} == 0 ]] ; then
			# set the general variable using the settings file
			VAR_NAME=`echo $line | sed -e 's/=.*//' | sed -e 's/\./_/g'`
			VAR_VAL=`echo $line | sed -e 's/^[^=]*=//'`
			echo "export ${VAR_NAME}=\"${VAR_VAL}\"" >> $fn_out
			echo "unset -v ${VAR_NAME}" >> $fn_bash_unset

			# if the setting is about the artifact name, then set BASH formattings for that
			if [[ $line == "skb.module.artifact="* ]] ; then
				VAR_ARTIFACT_BASH="`echo $line | sed -e 's/^[^=]*=//' | sed -e 's/\./_/g'`_version"
				echo "export artifact_version_bash=\"${VAR_ARTIFACT_BASH}\"" >> $fn_out
				echo "unset -v artifact_version_bash" >> $fn_bash_unset
			fi
		fi
	done < $fn_in

	# source that created bash file for version processing
	source $fn_out

	# new create version information
	# first, process the ANT file
	if grep -q $skb_module_artifact "$fn_version_ant"; then
		# ok, the version is already in there, replace
		local fn_tmp=$fn_version_ant.tmp
		touch $fn_tmp
		while IFS='
		' read line
		do
			if [[ $line == "$skb_module_artifact="* ]] ; then
				echo "$skb_module_artifact=$skb_module_version" >> $fn_tmp
			else
				echo "$line" >> $fn_tmp
			fi
		done < $fn_version_ant
		mv $fn_tmp $fn_version_ant
	else
		# version not in there yet, add
		echo "$skb_module_artifact=$skb_module_version" >> $fn_version_ant
	fi

	# next, process the BASH file
	if grep -q "export $artifact_version_bash" "$fn_version_bash"; then
		# ok, the version is already in there, replace
		local fn_tmp=$fn_version_bash.tmp
		touch $fn_tmp
		while IFS='
		' read line
		do
			if [[ $line == "export $artifact_version_bash="* ]] ; then
				echo "export $artifact_version_bash=$skb_module_version" >> $fn_tmp
				echo "unset -v $artifact_version_bash" >> $fn_bash_unset
			else
				echo "$line" >> $fn_tmp
			fi
		done < $fn_version_bash
		mv $fn_tmp $fn_version_bash
	else
		# version not in there yet, add
		echo "export $artifact_version_bash=$skb_module_version" >> $fn_version_bash
		echo "unset -v $artifact_version_bash" >> $fn_bash_unset
	fi

	# finally remove duplicates from the unset file
	sort $fn_bash_unset | uniq -d > $fn_bash_unset.tmp
	sort $fn_bash_unset | uniq -u >> $fn_bash_unset.tmp
	mv $fn_bash_unset.tmp $fn_bash_unset
}



##
## Test the infrastructure, general and module specific
##
test-files()
{
	if [ ! -d $dir_target ]; then
		PrintMessage "no target directory found, cannot proceed, try task <prepare-files>"
		exit 255
	fi
	if [ ! -f $fn_version_ant ]; then
		PrintMessage "no version file for ANT found, cannot proceed, try task <prepare-files>"
		exit 255
	fi
	if [ ! -f $fn_version_bash ]; then
		PrintMessage "no version file for BASH found, cannot proceed, try task <prepare-files>"
		exit 255
	fi
	if [ ! -f $dir_target/$1.bash ]; then
		PrintMessage "no BASH settings file for module <$1> found, cannot proceed, try task <prepare-files> for module <$1>"
		exit 255
	fi

	PrintMessage "------> all files ok for module <$1>"
}



##
## Create a POM. Use $1 as the tmp file name
##
create-pom()
{
	source $fn_version_bash

	local file_extension=".pom.xml"
	local gen_directory=$dir_target/generated-poms
	if [ ! -d $gen_directory ]; then
		mkdir $gen_directory
	fi

	local out_fn_fqpn=$gen_directory/$1$file_extension
	echo -n "" > $out_fn_fqpn

	local pom_fn_fqpn=../$skb_module_directory/pom.xml

	cat $dir_pom_artifacts/project-open.xml >> $out_fn_fqpn
		cat $dir_pom_artifacts/modelVersion.xml >> $out_fn_fqpn
		echo -n "	" >> $out_fn_fqpn
		cat $dir_pom_artifacts/groupId.xml >> $out_fn_fqpn
		echo "	<artifactId>$skb_module_artifact</artifactId>" >> $out_fn_fqpn
		echo "	<version>$skb_module_version</version>" >> $out_fn_fqpn
		echo "" >> $out_fn_fqpn

		echo "	<name>$skb_module_name</name>" >> $out_fn_fqpn
		echo "	<url>$skb_module_url</url>" >> $out_fn_fqpn
		echo "	<description>$skb_module_description</description>" >> $out_fn_fqpn
		echo "	<inceptionYear>$skb_module_inceptionYear</inceptionYear>" >> $out_fn_fqpn
		echo "" >> $out_fn_fqpn

		echo "	<properties>" >> $out_fn_fqpn
			echo "		<maven.compiler.source>$skb_module_properties_compiler_source</maven.compiler.source>" >> $out_fn_fqpn
			echo "		<maven.compiler.target>$skb_module_properties_compiler_target</maven.compiler.target>" >> $out_fn_fqpn
			echo "		<project.build.sourceEncoding>$skb_module_properties_encoding</project.build.sourceEncoding>" >> $out_fn_fqpn
			echo "		<project.resources.sourceEncoding>$skb_module_properties_encoding</project.resources.sourceEncoding>" >> $out_fn_fqpn
			echo "		<encoding>$skb_module_properties_encoding</encoding>" >> $out_fn_fqpn
			echo "		<file.encoding>$skb_module_properties_encoding</file.encoding>" >> $out_fn_fqpn
			cat $dir_pom_artifacts/properties.xml >> $out_fn_fqpn
		echo "	</properties>" >> $out_fn_fqpn
		echo "" >> $out_fn_fqpn

		cat $dir_pom_artifacts/licence.xml >> $out_fn_fqpn
		echo "" >> $out_fn_fqpn

		cat $dir_pom_artifacts/prerequisites.xml >> $out_fn_fqpn
		echo "" >> $out_fn_fqpn

		echo "	<scm>" >> $out_fn_fqpn
			echo "		<developerConnection>$skb_module_scm_developerConnection</developerConnection>" >> $out_fn_fqpn
			echo "		<connection>$skb_module_scm_connection</connection>" >> $out_fn_fqpn
			echo "		<tag>$skb_module_scm_tag</tag>" >> $out_fn_fqpn
			echo "		<url>$skb_module_scm_url</url>" >> $out_fn_fqpn
		echo "	</scm>" >> $out_fn_fqpn
		echo "" >> $out_fn_fqpn

		echo "	<issueManagement>" >> $out_fn_fqpn
			echo "		<url>$skb_module_issueManagement_url</url>" >> $out_fn_fqpn
			echo "		<system>$skb_module_issueManagement_system</system>" >> $out_fn_fqpn
		echo "	</issueManagement>" >> $out_fn_fqpn
		echo "" >> $out_fn_fqpn

		echo "	<dependencies>" >> $out_fn_fqpn
			for intdep in $skb_module_internalDependencies
			do
				_v=`echo $intdep | sed -e 's/\./_/g'`_version
				settings_fn=modules/$intdep.settings
				echo "		<dependency>" >> $out_fn_fqpn
				echo -n "			" >> $out_fn_fqpn
				cat $dir_pom_artifacts/groupId.xml >> $out_fn_fqpn
				echo "			<artifactId>$intdep</artifactId>" >> $out_fn_fqpn
				echo "			<version>${!_v}</version>" >> $out_fn_fqpn
				echo "		</dependency>" >> $out_fn_fqpn
			done
			if [ -f modules/$1-dependencies.xml ] ; then
				cat modules/$1-dependencies.xml >> $out_fn_fqpn
			fi
		echo "	</dependencies>" >> $out_fn_fqpn
		echo "" >> $out_fn_fqpn

		echo "	<build>" >> $out_fn_fqpn
		echo "		<plugins>" >> $out_fn_fqpn
		if [ -f modules/$1-plugins.xml ] ; then
			cat modules/$1-plugins.xml >> $out_fn_fqpn
		fi
		cat pom-artifacts/plugin-compiler.xml >> $out_fn_fqpn
		cat pom-artifacts/plugin-javadoc.xml >> $out_fn_fqpn
		cat pom-artifacts/plugin-dependency.xml >> $out_fn_fqpn
		echo "		</plugins>" >> $out_fn_fqpn
		echo "	</build>" >> $out_fn_fqpn

	cat $dir_pom_artifacts/project-close.xml >> $out_fn_fqpn

	cat $out_fn_fqpn > $pom_fn_fqpn
}



##
## Sets versions of some file types using ANT
##
set-versions()
{
	ant -S -f ant-macros/set-versions.build.xml  -DmoduleFile=../modules/$1.settings
}



##
## Creates template files for demo scripts
##
create-demo-templates()
{
	local module_demo_dir="../$skb_module_directory/src/demo"
	local tpl_dir="../$skb_module_directory/src/demo/templates"
	local tpl_local_dir="../$skb_module_directory/src/demo/templates-local"

	if [[ -d ../$skb_module_directory/target/lib/ ]] && [[ -f ../$skb_module_directory/deploy-demo.xml ]] && [[ -d $module_demo_dir ]] ; then
		if [ ! -d $tpl_dir ]; then
			mkdir $tpl_dir
		fi

		## Generate JAVA ClassPath
		CP_ALL=
		for i in `ls ../$skb_module_directory/target/lib/`
		do
			ib=`basename ${i}`
			CP_ALL="${CP_ALL}##JAVA_CP_SEP####DEMO_VAR##/lib/java/${ib}"
		done

		CP_SELF=
		for i in `ls ../$skb_module_directory/target/$skb_module_artifact-$skb_module_version.jar`
		do
			ib=`basename ${i}`
			CP_SELF="${CP_SELF}##JAVA_CP_SEP####DEMO_VAR##/lib/java/${ib}"
		done

		CP_JAVA=`echo "##DEMO_VAR##/etc##JAVA_CP_SEP####DEMO_VAR##/data##JAVA_CP_SEP####DEMO_VAR##/scripts${CP_ALL}${CP_SELF}"`


		## BATCH/DOS
		local fn_bat_head_tpl="$tpl_dir/bat-head.tpl"
		local fn_bat_exec_tpl="$tpl_dir/bat-exec.tpl"
		local fn_bat_java_tpl="$tpl_dir/bat-java.tpl"
		echo "@echo off" > $fn_bat_head_tpl
		echo "" >> $fn_bat_head_tpl
		echo "REM --> change DEMO_HOME to the root path of the demo" >> $fn_bat_head_tpl
		echo "set DEMO_HOME=##DEMO_HOME##" >> $fn_bat_head_tpl
		echo "" >> $fn_bat_head_tpl

		cp $fn_bat_head_tpl $fn_bat_exec_tpl
		echo "%DEMO_HOME%\bin\##RUN_SCRIPT## ##EXEC_NAME## %1 %2 %3 %4 %5 %6 %7 %8 %9"  >> $fn_bat_exec_tpl
		echo "" >> $fn_bat_exec_tpl

		cp $fn_bat_head_tpl $fn_bat_java_tpl
		echo "java -Dfile.encoding=UTF-8 -classpath \"${CP_JAVA}\" ##JAVA_MAIN_CLASS## %1 %2 %3 %4 %5 %6 %7 %8 %9" >> $fn_bat_java_tpl
		echo "" >> $fn_bat_java_tpl


		## SH (UNIX / LINUX / CYGWIN)
		local fn_sh_head_tpl="$tpl_dir/sh-head.tpl"
		local fn_sh_exec_tpl="$tpl_dir/sh-exec.tpl"
		local fn_sh_java_tpl="$tpl_dir/sh-java.tpl"
		echo "#!/bin/bash" > $fn_sh_head_tpl
		echo "" >> $fn_sh_head_tpl
		echo "# --> change DEMO_HOME to the root path of the demo" >> $fn_sh_head_tpl
		echo "DEMO_HOME=##DEMO_HOME##" >> $fn_sh_head_tpl
		echo "" >> $fn_sh_head_tpl

		cp $fn_sh_head_tpl $fn_sh_exec_tpl
		echo "\${DEMO_HOME}/bin/##RUN_SCRIPT## ##EXEC_NAME## \$*" >> $fn_sh_exec_tpl
		echo "" >> $fn_sh_exec_tpl

		cp $fn_sh_head_tpl $fn_sh_java_tpl
		echo "java -Dfile.encoding=UTF-8 -classpath \"${CP_JAVA}\" ##JAVA_MAIN_CLASS## \$*" >> $fn_sh_java_tpl
		echo "" >> $fn_sh_java_tpl

		## Create local templates
		if [ -d $tpl_local_dir ] ; then
			for bat in `ls $tpl_local_dir | grep .bat.tpl`
			do
				cat $fn_bat_head_tpl > $tpl_dir/local-$bat
				cat $tpl_local_dir/$bat >> $tpl_dir/local-$bat
			done
			for sh in `ls $tpl_local_dir | grep sh.tpl`
			do
				cat $fn_sh_head_tpl > $tpl_dir/local-$sh
				cat $tpl_local_dir/$sh >> $tpl_dir/local-$sh
			done
		fi

		## Copy ANT file and create ANT settings file
		cp ant-macros/demo-script.macro.xml $module_demo_dir

		local fn_bash_deploy_demo="../$skb_module_directory/deploy-demo"
		cat sh-artifacts/deploy-demos.txt > $fn_bash_deploy_demo
		echo "ant -f deploy-demo.xml" >> $fn_bash_deploy_demo

		local fn_ant_settings=$module_demo_dir/demo-script.settings
		echo > $fn_ant_settings
		echo "skb.module.artifact=$skb_module_artifact" >> $fn_ant_settings
		echo "skb.module.version=$skb_module_version" >> $fn_ant_settings
		echo "template.dir=src/demo/templates" >> $fn_ant_settings
		echo "demo.dir.abs=$dir_project_demo_abs" >> $fn_ant_settings
	else
		if [ ! -f ../$skb_module_directory/deploy-demo.xml ] ; then
			PrintMessage "------> no ant file, nothing to do"
		fi
		if [ ! -d ../$skb_module_directory/target/lib/ ] ; then
			PrintMessage "------> no lib directory found in module $1, try 'mvn $1'"
		fi
		if [ ! -d $module_demo_dir ] ; then
			PrintMessage "------> no demo directory found for module $1, try 'mkdir $module_demo_dir'"
		fi
	fi
}



##
## Deploy demo
##
deploy-demo()
{
	if [ -f "../$skb_module_directory/deploy-demo" ] ; then
		(cd ../$skb_module_directory; bash deploy-demo)
	else
		PrintMessage "------> no script for deploying demos"
	fi
}



##
## Source files requried to process tasks for modules
##
SourceFiles()
{
	source $fn_version_bash >& /dev/null
	source $fn_bash_unset >& /dev/null
	source $dir_target/$1.bash >& /dev/null
}



##
## Run the selected task(s) for the selected module(s)
##
for mod in $todo_modules
do
	PrintMessage "--> <$mod>"
	SourceFiles $mod
	for task in $todo_tasks
	do
		PrintMessage "----> $task"
		$task $mod
	done
done
exit 0;