#!/bin/bash

## Copyright 2014-2016 Sven van der Meer <vdmeer.sven@mykolab.com>
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

##
## Shell script to automate build and deployment of maven projects.
##
## @package    de.vandermeer.skb
## @author     Sven van der Meer <vdmeer.sven@mykolab.com>
## @copyright  2014-2016 Sven van der Meer
## @license    http://www.apache.org/licenses/LICENSE-2.0  Apache License, Version 2.0
## @version    v2.1.0 build 160226 (26-Feb-16)
##



##
## Don't change anything below unless you know what you are doing :)
##


## project home directory, target is placed here
if [ -z "$PROJECT_HOME" ] ; then
	echo "$MOD_SCRIPT_NAME: no project home directory defined"
	echo " --> create environment variable \$PROJECT_HOME pointing to the home directory"
	echo ""
	exit
fi

## script directory, from https://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
export MOD_SCRIPT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
## script name for error/info messages
export MOD_SCRIPT_NAME=`basename $0`

## etc directory with all settings and sub scripts
export MOD_ETC_DIR=$MOD_SCRIPT_DIR/../etc/modules

## etc based directory with all tasks
export MOD_ETC_TASKS_DIR=$MOD_ETC_DIR/tasks
MOD_AVAILABLE_TASKS=`ls $MOD_ETC_TASKS_DIR | sed -e 's/\.sh//g'`

## etc based directory with POM artifacts
export MOD_ETC_POMART_DIR=$MOD_ETC_DIR/pom-artifacts

## target directory for created artifacts and files
export MOD_TARGET_DIR=$PROJECT_HOME/target
export MOD_TARGET_MODULES_DIR=$MOD_TARGET_DIR/modules

## version file (internal dependencies) with BASH variable exports
export MOD_FILE_VERSION_BASH=$MOD_TARGET_MODULES_DIR/version.bash
## unset file for bash
export MOD_FILE_UNSET_BASH=$MOD_TARGET_MODULES_DIR/unset.bash

## generated file with available modules and aliases
mod_file_modules=$MOD_TARGET_MODULES_DIR/mod_modules.list
mod_file_aliases=$MOD_TARGET_MODULES_DIR/mod_aliases.list

## build versions file (external dependencies) with BASH variable exports
export MOD_FILE_BUILD_VERSIONS_BASH=$MOD_TARGET_MODULES_DIR/build-versions.bash

## mapping from aliasses to module names
## http://www.artificialworlds.net/blog/2012/10/17/bash-associative-array-examples/
declare -A mod_module_map
if [ -f $mod_file_modules ]; then
	if [ -f $mod_file_aliases ]; then
		al_ar=(`cat $mod_file_aliases`)
		md_ar=(`cat $mod_file_modules`)
		for index in ${!al_ar[@]}
		do
			mod_module_map[${al_ar[$index]}]=${md_ar[$index]}
		done
	fi
fi


## module settings dir
export MOD_MODULE_SETTINGS_DIR=src/module

#### Project name for printouts
####project_name=`echo ${PWD##*/} | tr '[:lower:]' '[:upper:]'`



##
## Help screen and exit condition (i.e. too few arguments)
##
Help()
{
	echo ""
	echo "$MOD_SCRIPT_NAME - prepares modules for deployment"
	echo ""
	echo "       Usage:  $MOD_SCRIPT_NAME [-options] [module] [task]"
	echo "         - use <-m module> and <-t task>"
	echo "         - use -ma plus <-t task>"
	echo "         - use -ta plus <-m module>"
	echo "         - use -ma and -ta and no further task nor module"
	echo ""
	echo "       Options"
	echo "         -ma    - process all defined modules"
	echo "         -ta    - process all defined tasks (results might not be what you expect!)"
	echo "         -h     - this help screen"
	echo "         -S     - silent mode, do not output anything except errors (tasks will output)"
	echo "         -c     - clean up: remove most generated directories / files"
	echo "         -i     - cleans and initializes: create target directies and process module setting files"
	echo ""
	echo "       Defined tasks:"
	for task in $MOD_AVAILABLE_TASKS
	do
		echo "         - $task"
	done
	echo ""
	echo -n "       Defined modules:"
	if [ -f $mod_file_aliases ]; then
		echo ""
		for key in `cat $mod_file_aliases`
		do
			echo "         - ${key}"
		done
	else
		echo " none"
	fi
	echo ""
	echo "       Requirements: bash version 4, some tasks might have other requirements"
	echo "       Requirements: \$PROJECT_MODULES must contain set of paths to modules, separated by colon (:) or spaces"
	echo ""
	exit 255;
}
if [ $# -eq 0 ]; then
	Help
fi



##
## Creates target directories and prepares files from module settings
##
init()
{
	echo -n "init ."
	if [ ! -d $MOD_TARGET_DIR ]; then
		mkdir $MOD_TARGET_DIR
	fi
	echo -n "."
	mkdir $MOD_TARGET_MODULES_DIR
	echo -n "."
	touch $MOD_FILE_VERSION_BASH
	echo -n "."
	touch $MOD_FILE_UNSET_BASH
	echo -n "."
	touch $mod_file_modules
	echo -n "."
	touch $mod_file_aliases
	echo -n "."
	touch $MOD_FILE_BUILD_VERSIONS_BASH

	echo -n "."
	if [ -z "$PROJECT_MODULES" ] ; then
		echo ""
		echo "$MOD_SCRIPT_NAME: no modules defined"
		echo " --> create environment variable \$PROJECT_MODULES and add paths to modules, one per line, separated by colon or space"
		echo " --> a path needs to be absolute"
		echo " --> a path needs to point to a directory in a maven project that ends with '$MOD_MODULE_SETTINGS_DIR'"
		echo " --> in the folder the path points to should be 1 (only 1) directory with having the name of the module"
		echo " --> in the folder of the module name must be a file <module-name>.settings"
		echo ""
		echo " --> module paths are not checked, use test-module to test module paths"
		echo ""
		exit
	fi
	echo " - done"

	for moddir in `echo $PROJECT_MODULES | sed -e 's/:/ /g'`
	do
		echo -n "."
		if [ ! -d $moddir ]; then
			echo "---> ignoring not existing path -> $moddir"; continue
		fi

		echo -n "."
		if [ ! -d $moddir/$MOD_MODULE_SETTINGS_DIR ]; then
			echo "---> ignoring path w/o directory '$MOD_MODULE_SETTINGS_DIR' -> $moddir"; continue
		fi

		echo -n "."
		local numSettingFiles=`ls -1U $moddir/$MOD_MODULE_SETTINGS_DIR/ | grep .settings | wc -l`
		if [ "1" != "$numSettingFiles" ]; then
			echo "---> ignoring path with $numSettingFiles settings file in '$MOD_MODULE_SETTINGS_DIR' -> $moddir"; continue
		fi

		echo -n "."
		local modSettingFile=$moddir/$MOD_MODULE_SETTINGS_DIR/`ls -1U $moddir/$MOD_MODULE_SETTINGS_DIR/ | grep .settings`
		local modName=`basename $modSettingFile .settings`

		#we now have a sort of valid module of name modName with settings file and root dir moddir
		#generate files

		echo -n "."
		# read settings for module and then create a BASH file for that
		local fn_out=$MOD_TARGET_MODULES_DIR/$modName.bash
		echo "" > $fn_out
		# read settings file and create bash sourceable file
		`cat $modSettingFile | sed -e ':b; s/^\([^=]*\)*\./\1_/; tb;' -e 's/=/=\"/' -e 's/$/\"/' -e 's/^/export /' > $fn_out`
		# read settings and create a bash unset file
		`cat $modSettingFile | sed -e 's/=.*//' -e 's/\./_/g' -e 's/^/unset -v /' -e 's/$//' >> $MOD_FILE_UNSET_BASH`

		echo -n "."
		#add directory to the settings file and to the unset file
		echo "export skb_module_directory=\"${moddir}\"" >> $fn_out
		echo "unset -v skb_module_directory" >> $MOD_FILE_UNSET_BASH

		echo -n "."
		#add module name to the settings file and to the unset file
		echo "export skb_module_artifact=\"${modName}\"" >> $fn_out
		echo "unset -v skb_module_artifact" >> $MOD_FILE_UNSET_BASH

		echo -n "."
		# source that created bash file for version processing
		source $fn_out
		# for the artifact name set BASH formattings
		artifact_version_bash="`echo $skb_module_artifact | sed -e 's/\-/_/g'`_version"
		# and add that to the bash files created
		echo "export artifact_version_bash=\"${artifact_version_bash}\"" >> $fn_out
		echo "unset -v artifact_version_bash" >> $MOD_FILE_UNSET_BASH

		echo -n "."
		# new create version information
		# process the BASH file
		if grep -q "export $artifact_version_bash" "$MOD_FILE_VERSION_BASH"; then
			# ok, the version is already in there, replace
			local fn_tmp=$MOD_FILE_VERSION_BASH.tmp
			touch $fn_tmp
			`cat $MOD_FILE_VERSION_BASH | sed -e 's/^export '$artifact_version_bash'.*$/export '$artifact_version_bash'='$skb_module_version'/' > $fn_tmp`
			mv $fn_tmp $MOD_FILE_VERSION_BASH
		else
			# version not in there yet, add
			echo "export $artifact_version_bash=$skb_module_version" >> $MOD_FILE_VERSION_BASH
			echo "unset -v $artifact_version_bash" >> $MOD_FILE_UNSET_BASH
		fi

		echo -n "."
		# finally, write the module name into the module file
		echo "$modName" >> $mod_file_modules
		if [ -z $skb_module_alias ]; then
			echo "$modName" >> $mod_file_aliases
		else
			echo "$skb_module_alias" >> $mod_file_aliases
		fi

		echo -n "."
		# echo some success message
		if [ -z $skb_module_alias ]; then
			echo " -> processed <$modName>"
			##echo " -> processed <$modName> -> $moddir"
		else
			echo " -> processed <$modName> with alias <$skb_module_alias>"
			##echo " -> processed <$modName> with alias <$skb_module_alias> -> $moddir"
		fi
	done
	sort -u $MOD_FILE_UNSET_BASH > target/_un
	cat target/_un > $MOD_FILE_UNSET_BASH
	rm target/_un


	echo -n "."
	# check if we have a build-version file with versions for external dependencies
	# if we have one process the config file
	if [ -z "$PROJECT_BUILD_VERSION_FILE" ]; then
		## nothing to read, set bash file empty, just in case
		echo > $MOD_FILE_BUILD_VERSIONS_BASH
		echo "\$PROJECT_BUILD_VERSION_FILE not set, no automatic process of external dependencies"
	else
		if [ ! -f "$PROJECT_BUILD_VERSION_FILE" ]; then
			## environment set, but file does not exist, set bash file empty, just in case
			echo > $MOD_FILE_BUILD_VERSIONS_BASH
			echo "build-versions file does not exist, please check: $PROJECT_BUILD_VERSION_FILE"
		else
			## something to read, let's go
			echo -n "."
			## first remove all empty lines
			grep -v '^[[:space:]]*$' $PROJECT_BUILD_VERSION_FILE > $MOD_TARGET_DIR/_vb1
			## now remove all comments (http://www.unix.com/shell-programming-and-scripting/20951-ignore-lines-begining.html)
			grep -v '^[[:space:]]*#' $MOD_TARGET_DIR/_vb1 > $MOD_TARGET_DIR/_vb2
			## now replace - and add export and write to bash sourcing file
			## the "export _ed" is important, it changes the variable name from xxx to _edxxx!
			`cat $MOD_TARGET_DIR/_vb2 | sed -e ':b; s/^\([^=]*\)*-/\1_/; tb;' -e 's/=/=\"/' -e 's/$/\"/' -e 's/^/export _ed/' > $MOD_FILE_BUILD_VERSIONS_BASH`
			## remove the tmp files
			rm $MOD_TARGET_DIR/_vb1
			rm $MOD_TARGET_DIR/_vb2
		fi
	fi

	echo ""
	echo "finished"
}


##
## Process CLI and set processing parameters
## - we process all CLI options before going any further
## - we exit programme if CLI options are amigious (we don't want a wiered machine!)
##
all_modules=false
all_tasks=false
cli_module=
cli_task=
progmod_silent=false
while [ $# -gt 0 ]
do
	case $1 in
		#-i init
		-i)		rm -fr $MOD_TARGET_MODULES_DIR;init;exit 255;;

		#-c cleans up
		-c)		rm -fr $MOD_TARGET_MODULES_DIR;exit 255;;

		#-h prints help and exists
		-h)		Help;exit 255;;

		#-S activates silent mode
		-S)		shift;progmod_silent=true;;

		# -ma checks if a single module was given, if not then set all modules to true
		-ma)	if [ "$cli_module" == "" ]; then
					shift;
					all_modules=true;
				else
					echo "$MOD_SCRIPT_NAME: -ma used and single module specified, which one?";
					exit 255;
				fi
		;;

		# -ta checks if a single task was given, if not then set all tasks to true
		-ta)	if [ "$cli_task" == "" ]; then
					shift;
					all_tasks=true;
				else
					echo "$MOD_SCRIPT_NAME: -ta used and single task specified, which one?";
					exit 255;
				fi
		;;

		# -t checks if all tasks are used, if not then if a task is given
		-t)		if [ $all_tasks == true ]; then
					echo "$MOD_SCRIPT_NAME: single task specified and -ta used, which one?";
					exit 255;
				else
					shift;
					if [ "$1" == "" ];then
						echo "$MOD_SCRIPT_NAME: -t used without a task";
						exit 255;
					else
						cli_task=$1;
						shift;
					fi
				fi
		;;

		# -m checks if all modules are used, if not then if a module is given
		-m)		if [ $all_modules == true ]; then
					echo "$MOD_SCRIPT_NAME: single module specified and -ma used, which one?";
					exit 255;
				else
					shift;
					if [ "$1" == "" ];then
						echo "$MOD_SCRIPT_NAME: -m used without a module";
						exit 255;
					else
						cli_module=$1;
						shift;
					fi
				fi
		;;
		*)	echo "$MOD_SCRIPT_NAME: undefined CLI option - $1"; exit 255;;
	esac
done

## now check if we have modules and tasks to process and if they are valid

## start with modules
todo_modules=
if [ $all_modules == true ]; then
	#case 1: all_modules is true
	todo_modules="${!mod_module_map[@]}"
else
	if [ "$cli_module" == "" ]; then
		#case 2: all_modules is false, cli_module is empty
		echo "$MOD_SCRIPT_NAME: no module given"; exit 255;
	else
		#case 3: all_modules is false, cli_module is not empty
		for key in "${!mod_module_map[@]}"
		do
			if [ "${key}" == "$cli_module" ]; then
				todo_modules=$cli_module
			fi
		done
		if [ "$todo_modules" == "" ]; then
			echo "$MOD_SCRIPT_NAME: no valid module given - module <$cli_module> is not defined"; exit 255;
		fi
	fi
fi

## next is tasks
todo_tasks=
if [ $all_tasks == true ]; then
	#case 1: all_tasks is true
	todo_tasks="$MOD_AVAILABLE_TASKS"
else
	if [ "$cli_task" == "" ]; then
		#case 2: all_tasks is false, cli_task is empty
		echo "$MOD_SCRIPT_NAME: no task given"; exit 255;
	else
		#case 3: all_tasks is false, cli_task is not empty
		for mod in $MOD_AVAILABLE_TASKS
		do
			if [ "$mod" == "$cli_task" ]; then
				todo_tasks="$cli_task"
			fi
		done
		if [ "$todo_tasks" == "" ]; then
			echo "$MOD_SCRIPT_NAME: no valid task given - task <$cli_task> is not defined"; exit 255;
		fi
	fi
fi



## now we have a list of modules and tasks in the todo_ variables, minimum length is 1
#echo $MOD_SCRIPT_NAME "processing modules: $todo_modules"
#echo $MOD_SCRIPT_NAME "processing tasks:   $todo_tasks"



##
## Source files requried to process tasks for modules
##
SourceFiles()
{
	source $MOD_FILE_VERSION_BASH >& /dev/null
	source $MOD_FILE_UNSET_BASH >& /dev/null
	source $MOD_TARGET_MODULES_DIR/$1.bash >& /dev/null
	source $MOD_FILE_BUILD_VERSIONS_BASH >& /dev/null
}



##
## Run the selected task(s) for the selected module(s)
##
for mod in $todo_modules
do
	SourceFiles ${mod_module_map[$mod]}
	for task in $todo_tasks
	do

		##if [ "$mod" == "${mod_module_map[$mod]}" ]; then
		##	echo -n "-> $task for <$mod> "
		##else
		##	echo -n "-> $task for <$mod[${mod_module_map[$mod]}]> "
		##fi
		echo -n "-> $task for <$mod> "

		$MOD_ETC_TASKS_DIR/$task.sh
		echo ""
	done
done
exit 0;
