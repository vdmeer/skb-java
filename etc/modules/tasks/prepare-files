#!/bin/bash

##
## Prepare the infrastructure, general plus module specific.
## call with
##   - $1 being the name of the module to prepare files for
##   - $2 being the settings file name
##

if [ ! -d $MOD_TARGET_DIR ]; then
	mkdir $MOD_TARGET_DIR
fi

if [ ! -d $MOD_TARGET_MODULES_DIR ]; then
	mkdir $MOD_TARGET_MODULES_DIR
fi

if [ ! -f $MOD_FILE_VERSION_BASH ]; then
	touch $MOD_FILE_VERSION_BASH
fi

if [ ! -f $MOD_FILE_UNSET_BASH ]; then
	touch $MOD_FILE_UNSET_BASH
fi

# read settings for module and then create a BASH file for that
fn_in=$2/$1.settings
fn_out=$MOD_TARGET_MODULES_DIR/$1.bash
echo "" > $fn_out

# read settings file and create bash sourceable file
`cat $fn_in | sed -e ':b; s/^\([^=]*\)*\./\1_/; tb;' -e 's/=/=\"/' -e 's/$/\"/' -e 's/^/export /' > $fn_out`
# read settings and create a bash unset file
`cat $fn_in | sed -e 's/=.*//' -e 's/\./_/g' -e 's/^/unset -v /' -e 's/$//' > $MOD_FILE_UNSET_BASH`

# source that created bash file for version processing
source $fn_out
# for the artifact name set BASH formattings
artifact_version_bash="`echo $skb_module_artifact | sed -e 's/\-/_/g'`_version"
# and add that to the bash files created
echo "export artifact_version_bash=\"${artifact_version_bash}\"" >> $fn_out
echo "unset -v artifact_version_bash" >> $MOD_FILE_UNSET_BASH

# new create version information
# process the BASH file
if grep -q "export $artifact_version_bash" "$MOD_FILE_VERSION_BASH"; then
	# ok, the version is already in there, replace
	fn_tmp=$MOD_FILE_VERSION_BASH.tmp
	touch $fn_tmp
	`cat $MOD_FILE_VERSION_BASH | sed -e 's/^export '$artifact_version_bash'.*$/export '$artifact_version_bash'='$skb_module_version'/' > $fn_tmp`
	mv $fn_tmp $MOD_FILE_VERSION_BASH
else
	# version not in there yet, add
	echo "export $artifact_version_bash=$skb_module_version" >> $MOD_FILE_VERSION_BASH
	echo "unset -v $artifact_version_bash" >> $MOD_FILE_UNSET_BASH
fi
